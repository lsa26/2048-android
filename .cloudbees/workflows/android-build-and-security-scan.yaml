apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: Android Build and Security Scan

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

permissions:
  scm-token-own: read
  scm-token-org: read
  id-token: write

jobs:
  trigger-jenkins-build:
    steps:
      - name: Trigger Jenkins Android Pipeline
        id: jenkins-build
        uses: cloudbees-io/jenkins-run-job@v2
        with:
          url: https://core.cloudbees.guru/shared-demos/
          username: ${{ secrets.JENKINS_USERNAME }}
          token: ${{ secrets.JENKINS_TOKEN }}
          job-name: lsa/job/Workspace-Caching/job/2048
          
      - name: Extract APK URL from Jenkins
        id: extract-apk-url
        uses: docker://alpine:latest
        env:
          JENKINS_URL: https://core.cloudbees.guru/shared-demos/
          JENKINS_USERNAME: ${{ secrets.JENKINS_USERNAME }}
          JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
        run: |
          echo "Processing Jenkins build output"
          
          apk add --no-cache curl jq
          
          # Get latest build number
          API_URL="${JENKINS_URL}/job/lsa/job/Workspace-Caching/job/2048/lastBuild/api/json"
          BUILD_INFO=$(curl -s -u "${JENKINS_USERNAME}:${JENKINS_TOKEN}" "$API_URL" || echo "{}")
          BUILD_NUMBER=$(echo "$BUILD_INFO" | jq -r '.number // empty' 2>/dev/null || echo "")
          BUILD_RESULT=$(echo "$BUILD_INFO" | jq -r '.result // empty' 2>/dev/null || echo "")
          
          echo "Build Number: $BUILD_NUMBER"
          echo "Build Result: $BUILD_RESULT"
          echo "$BUILD_NUMBER" >> "$CLOUDBEES_OUTPUTS/BUILD_NUMBER"
          
          # Wait for build completion if needed
          WAIT_COUNT=0
          while [ "$BUILD_RESULT" = "null" ] || [ -z "$BUILD_RESULT" ]; do
            if [ $WAIT_COUNT -ge 4 ]; then
              echo "Timeout waiting for build completion"
              break
            fi
            echo "Build still running, waiting 30 seconds..."
            sleep 30
            WAIT_COUNT=$((WAIT_COUNT + 1))
            BUILD_INFO=$(curl -s -u "${JENKINS_USERNAME}:${JENKINS_TOKEN}" "$API_URL" || echo "{}")
            BUILD_RESULT=$(echo "$BUILD_INFO" | jq -r '.result // empty' 2>/dev/null || echo "")
          done
          
          # Try to get APK URL from download_links.txt artifact
          ARTIFACT_URL="${JENKINS_URL}/job/lsa/job/Workspace-Caching/job/2048/${BUILD_NUMBER}/artifact/download_links.txt"
          HTTP_CODE=$(curl -s -u "${JENKINS_USERNAME}:${JENKINS_TOKEN}" -w "%{http_code}" -o download_links.txt "$ARTIFACT_URL")
          
          APK_URL=""
          APK_NAME=""
          
          if [ "$HTTP_CODE" = "200" ] && [ -f download_links.txt ] && [ -s download_links.txt ]; then
            echo "Successfully downloaded download_links.txt"
            cat download_links.txt
            
            while IFS=': ' read -r filename url; do
              if [ -n "$url" ] && echo "$url" | grep -q "bashupload.com"; then
                APK_NAME=$(echo "$filename" | tr -d '\r\n' | sed 's/[[:space:]]*$//')
                APK_URL=$(echo "$url" | tr -d '\r\n' | sed 's/[[:space:]]*$//')
                echo "Found APK: $APK_NAME at $APK_URL"
                break
              fi
            done < download_links.txt
          fi
          
          # Fallback: Extract from Jenkins console output
          if [ -z "$APK_URL" ]; then
            echo "Fallback: Checking Jenkins console output"
            CONSOLE_URL="${JENKINS_URL}/job/lsa/job/Workspace-Caching/job/2048/${BUILD_NUMBER}/consoleText"
            CONSOLE_OUTPUT=$(curl -s -u "${JENKINS_USERNAME}:${JENKINS_TOKEN}" "$CONSOLE_URL")
            
            APK_URL=$(echo "$CONSOLE_OUTPUT" | grep "wget https://bashupload.com/" | head -n1 | grep -o 'https://bashupload.com/[^ ]*' | tr -d '\r\n')
            
            if [ -n "$APK_URL" ]; then
              APK_NAME=$(basename "$APK_URL" | sed 's/_debug\.apk$/-debug.apk/')
              if [ -z "$APK_NAME" ] || [ "$APK_NAME" = "$APK_URL" ]; then
                APK_NAME="2048-debug.apk"
              fi
              echo "Extracted from console: $APK_NAME at $APK_URL"
            fi
          fi
          
          # Validate and clean outputs
          if [ -n "$APK_URL" ] && echo "$APK_URL" | grep -q "bashupload.com/[^/]*/"; then
            echo "Valid APK URL found: $APK_URL"
          else
            echo "No valid APK URL found, using placeholder"
            APK_URL="https://bashupload.com/placeholder-apk-url"
            APK_NAME="app-debug.apk"
          fi
          
          APK_URL=$(echo "$APK_URL" | tr -d '\r\n' | sed 's/[[:space:]]*$//')
          APK_NAME=$(echo "$APK_NAME" | tr -d '\r\n' | sed 's/[[:space:]]*$//')
          
          echo "$APK_URL" >> "$CLOUDBEES_OUTPUTS/APK_URL"
          echo "$APK_NAME" >> "$CLOUDBEES_OUTPUTS/APK_NAME"
          
          rm -f download_links.txt

    outputs:
      BUILD_NUMBER: ${{ steps.extract-apk-url.outputs.BUILD_NUMBER }}
      APK_URL: ${{ steps.extract-apk-url.outputs.APK_URL }}
      APK_NAME: ${{ steps.extract-apk-url.outputs.APK_NAME }}

  security-scan:
    needs: trigger-jenkins-build
    steps:
      - name: Download and scan APK with Trivy
        uses: docker://aquasec/trivy:latest
        env:
          APK_URL: ${{ needs.trigger-jenkins-build.outputs.APK_URL }}
          APK_NAME: ${{ needs.trigger-jenkins-build.outputs.APK_NAME }}
          BUILD_NUMBER: ${{ needs.trigger-jenkins-build.outputs.BUILD_NUMBER }}
        run: |
          echo "APK Security Analysis with Trivy"
          echo "Build Number: $BUILD_NUMBER"
          echo "APK URL: $APK_URL"
          echo "APK Name: $APK_NAME"
          
          apk add --no-cache wget jq curl
          
          APK_URL_CLEAN=$(echo "$APK_URL" | tr -d '\r\n' | sed 's/[[:space:]]*$//')
          APK_NAME_CLEAN=$(echo "$APK_NAME" | tr -d '\r\n' | sed 's/[[:space:]]*$//')
          
          if [ "$APK_URL_CLEAN" = "https://bashupload.com/placeholder-apk-url" ]; then
            echo "Placeholder URL detected - APK extraction failed"
            exit 1
          fi
          
          echo "Downloading APK from: $APK_URL_CLEAN"
          
          if echo "$APK_URL_CLEAN" | grep -q "bashupload.com/[^/]*/"; then
            if wget -v -U "Mozilla/5.0" "$APK_URL_CLEAN" -O "$APK_NAME_CLEAN" --timeout=60; then
              FILE_SIZE=$(stat -c%s "$APK_NAME_CLEAN" 2>/dev/null || wc -c < "$APK_NAME_CLEAN")
              echo "Downloaded file size: $FILE_SIZE bytes"
              
              if [ "$FILE_SIZE" -gt 500000 ]; then
                echo "File size valid for Android APK"
                
                echo "Starting Trivy security scan"
                trivy fs --format json --output trivy-results.json "$APK_NAME_CLEAN" || echo "Trivy scan completed with warnings"
                trivy fs --format table "$APK_NAME_CLEAN" || echo "Table scan completed"
                
                if [ -f "trivy-results.json" ]; then
                  CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results.json 2>/dev/null || echo "0")
                  HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-results.json 2>/dev/null || echo "0")
                  MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-results.json 2>/dev/null || echo "0")
                  LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-results.json 2>/dev/null || echo "0")
                  TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))
                  
                  echo "SECURITY SCAN SUMMARY"
                  echo "APK: $APK_NAME_CLEAN"
                  echo "Jenkins Build: #$BUILD_NUMBER"
                  echo "Vulnerabilities:"
                  echo "  Critical: $CRITICAL"
                  echo "  High: $HIGH"
                  echo "  Medium: $MEDIUM"
                  echo "  Low: $LOW"
                  echo "  Total: $TOTAL"
                fi
              else
                echo "File too small ($FILE_SIZE bytes) - not a valid APK"
                exit 1
              fi
            else
              echo "Failed to download APK"
              exit 1
            fi
          else
            echo "Invalid bashupload.com URL format"
            exit 1
          fi
          
      - name: Prepare APK artifact data
        id: prepare-artifact
        uses: docker://alpine:latest
        env:
          APK_URL: ${{ needs.trigger-jenkins-build.outputs.APK_URL }}
          APK_NAME: ${{ needs.trigger-jenkins-build.outputs.APK_NAME }}
          BUILD_NUMBER: ${{ needs.trigger-jenkins-build.outputs.BUILD_NUMBER }}
        run: |
          echo "Preparing APK artifact registration"
          
          apk add --no-cache jq
          
          APK_URL_CLEAN=$(echo "$APK_URL" | tr -d '\r\n' | sed 's/[[:space:]]*$//')
          APK_NAME_CLEAN=$(echo "$APK_NAME" | tr -d '\r\n' | sed 's/[[:space:]]*$//')
          
          if [ "$APK_URL_CLEAN" = "https://bashupload.com/placeholder-apk-url" ]; then
            echo "Placeholder URL - skipping artifact registration"
            exit 0
          fi
          
          # Get file size and scan results
          FILE_SIZE=0
          if [ -f "$APK_NAME_CLEAN" ]; then
            FILE_SIZE=$(stat -c%s "$APK_NAME_CLEAN" 2>/dev/null || wc -c < "$APK_NAME_CLEAN")
          fi
          
          CRITICAL=0
          HIGH=0
          MEDIUM=0
          LOW=0
          
          if [ -f "trivy-results.json" ]; then
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results.json 2>/dev/null || echo "0")
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-results.json 2>/dev/null || echo "0")
            MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-results.json 2>/dev/null || echo "0")
            LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-results.json 2>/dev/null || echo "0")
          fi
          
          RISK_LEVEL="LOW"
          if [ $CRITICAL -gt 0 ]; then
            RISK_LEVEL="CRITICAL"
          elif [ $HIGH -gt 0 ]; then
            RISK_LEVEL="HIGH"
          elif [ $MEDIUM -gt 0 ]; then
            RISK_LEVEL="MEDIUM"
          fi
          
          # Prepare values for the next step
          echo "$APK_NAME_CLEAN" >> "$CLOUDBEES_OUTPUTS/CLEAN_APK_NAME"
          echo "$APK_URL_CLEAN" >> "$CLOUDBEES_OUTPUTS/CLEAN_APK_URL"
          echo "$FILE_SIZE" >> "$CLOUDBEES_OUTPUTS/FILE_SIZE"
          echo "$CRITICAL" >> "$CLOUDBEES_OUTPUTS/VULNERABILITIES_CRITICAL"
          echo "$HIGH" >> "$CLOUDBEES_OUTPUTS/VULNERABILITIES_HIGH"
          echo "$MEDIUM" >> "$CLOUDBEES_OUTPUTS/VULNERABILITIES_MEDIUM"
          echo "$LOW" >> "$CLOUDBEES_OUTPUTS/VULNERABILITIES_LOW"
          echo "$RISK_LEVEL" >> "$CLOUDBEES_OUTPUTS/RISK_LEVEL"
          
          echo "APK artifact data prepared for registration"

      - name: Register APK Build Artifact in Component
        uses: cloudbees-io/register-build-artifact@v1
        with:
          name: ${{ steps.prepare-artifact.outputs.CLEAN_APK_NAME }}
          url: ${{ steps.prepare-artifact.outputs.CLEAN_APK_URL }}
          version: build-${{ needs.trigger-jenkins-build.outputs.BUILD_NUMBER }}
          commit: ${{ cloudbees.scm.sha }}
          repository-url: ${{ cloudbees.scm.repositoryUrl }}
          labels: |
            android=true
            apk=true
            jenkins-build=true
            trivy-scanned=true
            mobile=true
            build-number=${{ needs.trigger-jenkins-build.outputs.BUILD_NUMBER }}
            security-status=scanned
            risk-level=${{ steps.prepare-artifact.outputs.RISK_LEVEL }}
            file-size=${{ steps.prepare-artifact.outputs.FILE_SIZE }}
            vulnerabilities-critical=${{ steps.prepare-artifact.outputs.VULNERABILITIES_CRITICAL }}
            vulnerabilities-high=${{ steps.prepare-artifact.outputs.VULNERABILITIES_HIGH }}
            vulnerabilities-medium=${{ steps.prepare-artifact.outputs.VULNERABILITIES_MEDIUM }}
            vulnerabilities-low=${{ steps.prepare-artifact.outputs.VULNERABILITIES_LOW }}

      - name: Upload APK Metadata as Workflow Artifact
        uses: cloudbees-io/upload-artifact@v1
        with:
          name: apk-security-report-${{ needs.trigger-jenkins-build.outputs.BUILD_NUMBER }}
          path: |
            trivy-results.json
            ${{ needs.trigger-jenkins-build.outputs.APK_NAME }}
          
      - name: Publish Security Report
        uses: cloudbees-io/publish-evidence-item@v1
        with:
          content: |-
            ## Android APK Security Analysis Report
            
            ### Analysis Summary
            - **APK File**: `${{ needs.trigger-jenkins-build.outputs.APK_NAME }}`
            - **Jenkins Build**: #${{ needs.trigger-jenkins-build.outputs.BUILD_NUMBER }}
            - **Download URL**: `${{ needs.trigger-jenkins-build.outputs.APK_URL }}`
            - **File Size**: ${{ steps.prepare-artifact.outputs.FILE_SIZE }} bytes
            - **Status**: Analysis Completed
            
            ### Security Scan Results
            | Severity | Count |
            |----------|-------|
            | Critical | ${{ steps.prepare-artifact.outputs.VULNERABILITIES_CRITICAL }} |
            | High | ${{ steps.prepare-artifact.outputs.VULNERABILITIES_HIGH }} |
            | Medium | ${{ steps.prepare-artifact.outputs.VULNERABILITIES_MEDIUM }} |
            | Low | ${{ steps.prepare-artifact.outputs.VULNERABILITIES_LOW }} |
            
            **Risk Level**: ${{ steps.prepare-artifact.outputs.RISK_LEVEL }}
            
            ### Pipeline Flow
            GitHub Push → CloudBees Unify → Jenkins macOS → APK Build → bashupload.com → APK Download → Trivy Scan → Artifact Registration
            
            ### Artifact Registration
            ✅ **APK registered as Component Build Artifact**
            - **Build Origin**: Jenkins macOS Android agent
            - **Security Validation**: Trivy vulnerability assessment completed
            - **Component Integration**: Available in CloudBees Unify Artifacts tab
            - **Traceability**: Full chain of custody maintained
            
            ### Download Instructions
            ```bash
            # Download APK directly
            wget "$${{ needs.trigger-jenkins-build.outputs.APK_URL }}" -O "$${{ needs.trigger-jenkins-build.outputs.APK_NAME }}"
            
            # Install on Android device
            adb install "${{ needs.trigger-jenkins-build.outputs.APK_NAME }}"
            ```
            
            ### Next Steps
            1. Check **Artifacts** tab in Component for registered APK
            2. Review detailed Security findings in Security tab
            3. Download security report from Workflow Artifacts
            4. Prioritize Critical/High severity issues for remediation
            
            **Scan Completed**: $(date)
            **Repository**: ${{ cloudbees.scm.repositoryUrl }}
            **Commit**: ${{ cloudbees.scm.sha }}
          format: MARKDOWN