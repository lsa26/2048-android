apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: Android Build and Security Scan

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

permissions:
  scm-token-own: read
  scm-token-org: read
  id-token: write

jobs:
  trigger-jenkins-build:
    steps:
      - name: Trigger Jenkins Android Pipeline
        id: jenkins-build
        uses: cloudbees-io/jenkins-run-job@v2
        with:
          url: https://core.cloudbees.guru/shared-demos/
          username: ${{ secrets.JENKINS_USERNAME }}
          token: ${{ secrets.JENKINS_TOKEN }}
          job-name: lsa/Workspace-Caching/2048
          parameters: |
            {
              "CLEAN_BUILD": "false",
              "BUILD_TYPE": "release"
            }
          
      - name: Extract APK download URL from Jenkins logs
        id: extract-apk-url
        uses: docker://curlimages/curl:latest
        env:
          JENKINS_URL: https://core.cloudbees.guru/shared-demos/
          JENKINS_USER: ${{ secrets.JENKINS_USERNAME }}
          JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
          BUILD_NUMBER: ${{ steps.jenkins-build.outputs.build-number }}
        run: |
          echo "üîç Extracting APK download URL from Jenkins logs..."
          
          # Get Jenkins build console output
          CONSOLE_OUTPUT=$(curl -s -u "${JENKINS_USER}:${JENKINS_TOKEN}" \
            "${JENKINS_URL}/job/lsa/job/Workspace-Caching/job/2048/${BUILD_NUMBER}/consoleText")
          
          # Extract the bashupload.com URL from logs
          APK_URL=$(echo "$CONSOLE_OUTPUT" | grep -o 'https://bashupload.com/[^[:space:]]*\.apk' | head -1)
          
          if [ -n "$APK_URL" ]; then
            echo "‚úÖ Found APK URL: $APK_URL"
            echo "$APK_URL" >> "$CLOUDBEES_OUTPUTS/APK_URL"
          else
            echo "‚ùå No APK URL found in Jenkins logs"
            echo "NONE" >> "$CLOUDBEES_OUTPUTS/APK_URL"
          fi

    outputs:
      BUILD_STATUS: ${{ steps.jenkins-build.outputs.status }}
      APK_URL: ${{ steps.extract-apk-url.outputs.APK_URL }}

  security-scan:
    needs: trigger-jenkins-build
    steps:
      - name: Checkout source code
        uses: cloudbees-io/checkout@v1
        
      - name: Security scan with SonarQube
        uses: cloudbees-io/sonarqube-bundled-sast-scan-code@v1
        kind: scan
        continue-on-error: true
        with:
          language: LANGUAGE_JAVA
          
      - name: Security scan with Snyk
        uses: cloudbees-io/snyk-sast-scan-code@v1
        kind: scan
        continue-on-error: true
        with:
          orgname: ${{ secrets.SNYK_ORGNAME }}
          token: ${{ secrets.SNYK_TOKEN }}
          language: LANGUAGE_JAVA
          
      - name: Publish security results
        uses: cloudbees-io/publish-evidence-item@v1
        with:
          content: |-
            ## Security Scan Results
            
            Security scanning has been performed on the Java/Android source code.
            Check the security tabs to see detailed vulnerability findings.
          format: MARKDOWN

  binary-security-scan:
    needs: trigger-jenkins-build
    if: ${{ success() && needs.trigger-jenkins-build.outputs.APK_URL != 'NONE' }}
    steps:
      - name: Download and scan APK
        uses: docker://alpine:latest
        env:
          APK_URL: ${{ needs.trigger-jenkins-build.outputs.APK_URL }}
        run: |
          echo "üîç Downloading APK from: $APK_URL"
          
          # Install required tools
          apk add --no-cache wget file
          
          # Download the APK
          wget -O app.apk "$APK_URL"
          
          # Verify it's actually an APK file
          file app.apk
          
          # Basic APK analysis (you can replace this with a proper mobile security scanner)
          echo "üì± Basic APK analysis..."
          
          # Check file size
          APK_SIZE=$(stat -c%s app.apk)
          echo "APK Size: ${APK_SIZE} bytes"
          
          # You could use tools like:
          # - MobSF (Mobile Security Framework)
          # - QARK (Quick Android Review Kit)
          # - APKTool for static analysis
          
          echo "‚úÖ APK downloaded and basic checks completed"
          echo "For production, integrate with proper mobile security scanning tools"
          
      - name: Publish APK scan results
        uses: cloudbees-io/publish-evidence-item@v1
        if: always()
        with:
          content: |-
            ## Android APK Security Scan
            
            **APK Download URL**: ${{ needs.trigger-jenkins-build.outputs.APK_URL }}
            
            The APK file generated by the Jenkins pipeline has been downloaded and analyzed.
            
            For comprehensive mobile security scanning, consider integrating:
            - **MobSF** (Mobile Security Framework)
            - **QARK** (Quick Android Review Kit) 
            - **Veracode** mobile scanning
            - **Checkmarx** mobile analysis
            
            Basic file verification completed successfully.
          format: MARKDOWN